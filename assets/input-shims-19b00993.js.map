{"version":3,"file":"input-shims-19b00993.js","sources":["../../node_modules/@ionic/core/components/input-shims.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { g as getScrollElement, c as scrollByPoint, a as findClosestIonContent } from './index8.js';\nimport { a as addEventListener, b as removeEventListener, r as raf, c as componentOnReady } from './helpers.js';\nimport { w as win } from './index5.js';\n\nvar KeyboardResize;\n(function (KeyboardResize) {\n  KeyboardResize[\"Body\"] = \"body\";\n  KeyboardResize[\"Ionic\"] = \"ionic\";\n  KeyboardResize[\"Native\"] = \"native\";\n  KeyboardResize[\"None\"] = \"none\";\n})(KeyboardResize || (KeyboardResize = {}));\nconst Keyboard = {\n  getEngine() {\n    var _a;\n    return ((_a = win === null || win === void 0 ? void 0 : win.Capacitor) === null || _a === void 0 ? void 0 : _a.isPluginAvailable('Keyboard')) && (win === null || win === void 0 ? void 0 : win.Capacitor.Plugins.Keyboard);\n  },\n  getResizeMode() {\n    const engine = this.getEngine();\n    if (!engine || !engine.getResizeMode) {\n      return Promise.resolve(undefined);\n    }\n    return engine.getResizeMode();\n  },\n};\n\nconst cloneMap = new WeakMap();\nconst relocateInput = (componentEl, inputEl, shouldRelocate, inputRelativeY = 0, disabledClonedInput = false) => {\n  if (cloneMap.has(componentEl) === shouldRelocate) {\n    return;\n  }\n  if (shouldRelocate) {\n    addClone(componentEl, inputEl, inputRelativeY, disabledClonedInput);\n  }\n  else {\n    removeClone(componentEl, inputEl);\n  }\n};\n// TODO(FW-2832): type\nconst isFocused = (input) => {\n  return input === input.getRootNode().activeElement;\n};\nconst addClone = (componentEl, inputEl, inputRelativeY, disabledClonedInput = false) => {\n  // this allows for the actual input to receive the focus from\n  // the user's touch event, but before it receives focus, it\n  // moves the actual input to a location that will not screw\n  // up the app's layout, and does not allow the native browser\n  // to attempt to scroll the input into place (messing up headers/footers)\n  // the cloned input fills the area of where native input should be\n  // while the native input fakes out the browser by relocating itself\n  // before it receives the actual focus event\n  // We hide the focused input (with the visible caret) invisible by making it scale(0),\n  const parentEl = inputEl.parentNode;\n  // DOM WRITES\n  const clonedEl = inputEl.cloneNode(false);\n  clonedEl.classList.add('cloned-input');\n  clonedEl.tabIndex = -1;\n  /**\n   * Making the cloned input disabled prevents\n   * Chrome for Android from still scrolling\n   * the entire page since this cloned input\n   * will briefly be hidden by the keyboard\n   * even though it is not focused.\n   *\n   * This is not needed on iOS. While this\n   * does not cause functional issues on iOS,\n   * the input still appears slightly dimmed even\n   * if we set opacity: 1.\n   */\n  if (disabledClonedInput) {\n    clonedEl.disabled = true;\n  }\n  parentEl.appendChild(clonedEl);\n  cloneMap.set(componentEl, clonedEl);\n  const doc = componentEl.ownerDocument;\n  const tx = doc.dir === 'rtl' ? 9999 : -9999;\n  componentEl.style.pointerEvents = 'none';\n  inputEl.style.transform = `translate3d(${tx}px,${inputRelativeY}px,0) scale(0)`;\n};\nconst removeClone = (componentEl, inputEl) => {\n  const clone = cloneMap.get(componentEl);\n  if (clone) {\n    cloneMap.delete(componentEl);\n    clone.remove();\n  }\n  componentEl.style.pointerEvents = '';\n  inputEl.style.transform = '';\n};\n/**\n * Factoring in 50px gives us some room\n * in case the keyboard shows password/autofill bars\n * asynchronously.\n */\nconst SCROLL_AMOUNT_PADDING = 50;\n\nconst enableHideCaretOnScroll = (componentEl, inputEl, scrollEl) => {\n  if (!scrollEl || !inputEl) {\n    return () => {\n      return;\n    };\n  }\n  const scrollHideCaret = (shouldHideCaret) => {\n    if (isFocused(inputEl)) {\n      relocateInput(componentEl, inputEl, shouldHideCaret);\n    }\n  };\n  const onBlur = () => relocateInput(componentEl, inputEl, false);\n  const hideCaret = () => scrollHideCaret(true);\n  const showCaret = () => scrollHideCaret(false);\n  addEventListener(scrollEl, 'ionScrollStart', hideCaret);\n  addEventListener(scrollEl, 'ionScrollEnd', showCaret);\n  inputEl.addEventListener('blur', onBlur);\n  return () => {\n    removeEventListener(scrollEl, 'ionScrollStart', hideCaret);\n    removeEventListener(scrollEl, 'ionScrollEnd', showCaret);\n    inputEl.removeEventListener('blur', onBlur);\n  };\n};\n\nconst SKIP_SELECTOR = 'input, textarea, [no-blur], [contenteditable]';\nconst enableInputBlurring = () => {\n  let focused = true;\n  let didScroll = false;\n  const doc = document;\n  const onScroll = () => {\n    didScroll = true;\n  };\n  const onFocusin = () => {\n    focused = true;\n  };\n  const onTouchend = (ev) => {\n    // if app did scroll return early\n    if (didScroll) {\n      didScroll = false;\n      return;\n    }\n    const active = doc.activeElement;\n    if (!active) {\n      return;\n    }\n    // only blur if the active element is a text-input or a textarea\n    if (active.matches(SKIP_SELECTOR)) {\n      return;\n    }\n    // if the selected target is the active element, do not blur\n    const tapped = ev.target;\n    if (tapped === active) {\n      return;\n    }\n    if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n      return;\n    }\n    focused = false;\n    // TODO FW-2796: find a better way, why 50ms?\n    setTimeout(() => {\n      if (!focused) {\n        active.blur();\n      }\n    }, 50);\n  };\n  addEventListener(doc, 'ionScrollStart', onScroll);\n  doc.addEventListener('focusin', onFocusin, true);\n  doc.addEventListener('touchend', onTouchend, false);\n  return () => {\n    removeEventListener(doc, 'ionScrollStart', onScroll, true);\n    doc.removeEventListener('focusin', onFocusin, true);\n    doc.removeEventListener('touchend', onTouchend, false);\n  };\n};\n\nconst SCROLL_ASSIST_SPEED = 0.3;\nconst getScrollData = (componentEl, contentEl, keyboardHeight) => {\n  var _a;\n  const itemEl = (_a = componentEl.closest('ion-item,[ion-item]')) !== null && _a !== void 0 ? _a : componentEl;\n  return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, componentEl.ownerDocument.defaultView.innerHeight // TODO(FW-2832): type\n  );\n};\nconst calcScrollData = (inputRect, contentRect, keyboardHeight, platformHeight) => {\n  // compute input's Y values relative to the body\n  const inputTop = inputRect.top;\n  const inputBottom = inputRect.bottom;\n  // compute visible area\n  const visibleAreaTop = contentRect.top;\n  const visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\n  // compute safe area\n  const safeAreaTop = visibleAreaTop + 15;\n  const safeAreaBottom = visibleAreaBottom - SCROLL_AMOUNT_PADDING;\n  // figure out if each edge of the input is within the safe area\n  const distanceToBottom = safeAreaBottom - inputBottom;\n  const distanceToTop = safeAreaTop - inputTop;\n  // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n  const desiredScrollAmount = Math.round(distanceToBottom < 0 ? -distanceToBottom : distanceToTop > 0 ? -distanceToTop : 0);\n  // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n  // gets focus, so make sure we don't scroll the input above the visible area\n  const scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n  const distance = Math.abs(scrollAmount);\n  const duration = distance / SCROLL_ASSIST_SPEED;\n  const scrollDuration = Math.min(400, Math.max(150, duration));\n  return {\n    scrollAmount,\n    scrollDuration,\n    scrollPadding: keyboardHeight,\n    inputSafeY: -(inputTop - safeAreaTop) + 4,\n  };\n};\n\nconst PADDING_TIMER_KEY = '$ionPaddingTimer';\n/**\n * Scroll padding adds additional padding to the bottom\n * of ion-content so that there is enough scroll space\n * for an input to be scrolled above the keyboard. This\n * is needed in environments where the webview does not\n * resize when the keyboard opens.\n *\n * Example: If an input at the bottom of ion-content is\n * focused, there is no additional scrolling space below\n * it, so the input cannot be scrolled above the keyboard.\n * Scroll padding fixes this by adding padding equal to the\n * height of the keyboard to the bottom of the content.\n *\n * Common environments where this is needed:\n * - Mobile Safari: The keyboard overlays the content\n * - Capacitor/Cordova on iOS: The keyboard overlays the content\n * when the KeyboardResize mode is set to 'none'.\n */\nconst setScrollPadding = (contentEl, paddingAmount, clearCallback) => {\n  const timer = contentEl[PADDING_TIMER_KEY];\n  if (timer) {\n    clearTimeout(timer);\n  }\n  if (paddingAmount > 0) {\n    contentEl.style.setProperty('--keyboard-offset', `${paddingAmount}px`);\n  }\n  else {\n    contentEl[PADDING_TIMER_KEY] = setTimeout(() => {\n      contentEl.style.setProperty('--keyboard-offset', '0px');\n      if (clearCallback) {\n        clearCallback();\n      }\n    }, 120);\n  }\n};\n/**\n * When an input is about to be focused,\n * set a timeout to clear any scroll padding\n * on the content. Note: The clearing\n * is done on a timeout so that if users\n * are moving focus from one input to the next\n * then re-adding scroll padding to the new\n * input with cancel the timeout to clear the\n * scroll padding.\n */\nconst setClearScrollPaddingListener = (inputEl, contentEl, doneCallback) => {\n  const clearScrollPadding = () => {\n    if (contentEl) {\n      setScrollPadding(contentEl, 0, doneCallback);\n    }\n  };\n  inputEl.addEventListener('focusout', clearScrollPadding, { once: true });\n};\n\nlet currentPadding = 0;\nconst enableScrollAssist = (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, keyboardResize, disableClonedInput = false) => {\n  /**\n   * Scroll padding should only be added if:\n   * 1. The global scrollPadding config option\n   * is set to true.\n   * 2. The native keyboard resize mode is either \"none\"\n   * (keyboard overlays webview) or undefined (resize\n   * information unavailable)\n   * Resize info is available on Capacitor 4+\n   */\n  const addScrollPadding = enableScrollPadding && (keyboardResize === undefined || keyboardResize.mode === KeyboardResize.None);\n  /**\n   * When the input is about to receive\n   * focus, we need to move it to prevent\n   * mobile Safari from adjusting the viewport.\n   */\n  const focusIn = async () => {\n    jsSetFocus(componentEl, inputEl, contentEl, footerEl, keyboardHeight, addScrollPadding, disableClonedInput);\n  };\n  componentEl.addEventListener('focusin', focusIn, true);\n  return () => {\n    componentEl.removeEventListener('focusin', focusIn, true);\n  };\n};\nconst jsSetFocus = async (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, disableClonedInput = false) => {\n  if (!contentEl && !footerEl) {\n    return;\n  }\n  const scrollData = getScrollData(componentEl, (contentEl || footerEl), keyboardHeight);\n  if (contentEl && Math.abs(scrollData.scrollAmount) < 4) {\n    // the text input is in a safe position that doesn't\n    // require it to be scrolled into view, just set focus now\n    inputEl.focus();\n    /**\n     * Even though the input does not need\n     * scroll assist, we should preserve the\n     * the scroll padding as users could be moving\n     * focus from an input that needs scroll padding\n     * to an input that does not need scroll padding.\n     * If we remove the scroll padding now, users will\n     * see the page jump.\n     */\n    if (enableScrollPadding && contentEl !== null) {\n      currentPadding += scrollData.scrollPadding;\n      setScrollPadding(contentEl, currentPadding);\n      setClearScrollPaddingListener(inputEl, contentEl, () => (currentPadding = 0));\n    }\n    return;\n  }\n  // temporarily move the focus to the focus holder so the browser\n  // doesn't freak out while it's trying to get the input in place\n  // at this point the native text input still does not have focus\n  relocateInput(componentEl, inputEl, true, scrollData.inputSafeY, disableClonedInput);\n  inputEl.focus();\n  /**\n   * Relocating/Focusing input causes the\n   * click event to be cancelled, so\n   * manually fire one here.\n   */\n  raf(() => componentEl.click());\n  /**\n   * If enabled, we can add scroll padding to\n   * the bottom of the content so that scroll assist\n   * has enough room to scroll the input above\n   * the keyboard.\n   */\n  if (enableScrollPadding && contentEl) {\n    currentPadding += scrollData.scrollPadding;\n    setScrollPadding(contentEl, currentPadding);\n  }\n  if (typeof window !== 'undefined') {\n    let scrollContentTimeout;\n    const scrollContent = async () => {\n      // clean up listeners and timeouts\n      if (scrollContentTimeout !== undefined) {\n        clearTimeout(scrollContentTimeout);\n      }\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.removeEventListener('ionKeyboardDidShow', scrollContent);\n      // scroll the input into place\n      if (contentEl) {\n        await scrollByPoint(contentEl, 0, scrollData.scrollAmount, scrollData.scrollDuration);\n      }\n      // the scroll view is in the correct position now\n      // give the native text input focus\n      relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\n      // ensure this is the focused input\n      inputEl.focus();\n      /**\n       * When the input is about to be blurred\n       * we should set a timeout to remove\n       * any scroll padding.\n       */\n      if (enableScrollPadding) {\n        setClearScrollPaddingListener(inputEl, contentEl, () => (currentPadding = 0));\n      }\n    };\n    const doubleKeyboardEventListener = () => {\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.addEventListener('ionKeyboardDidShow', scrollContent);\n    };\n    if (contentEl) {\n      const scrollEl = await getScrollElement(contentEl);\n      /**\n       * scrollData will only consider the amount we need\n       * to scroll in order to properly bring the input\n       * into view. It will not consider the amount\n       * we can scroll in the content element.\n       * As a result, scrollData may request a greater\n       * scroll position than is currently available\n       * in the DOM. If this is the case, we need to\n       * wait for the webview to resize/the keyboard\n       * to show in order for additional scroll\n       * bandwidth to become available.\n       */\n      const totalScrollAmount = scrollEl.scrollHeight - scrollEl.clientHeight;\n      if (scrollData.scrollAmount > totalScrollAmount - scrollEl.scrollTop) {\n        /**\n         * On iOS devices, the system will show a \"Passwords\" bar above the keyboard\n         * after the initial keyboard is shown. This prevents the webview from resizing\n         * until the \"Passwords\" bar is shown, so we need to wait for that to happen first.\n         */\n        if (inputEl.type === 'password') {\n          // Add 50px to account for the \"Passwords\" bar\n          scrollData.scrollAmount += SCROLL_AMOUNT_PADDING;\n          window.addEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n        }\n        else {\n          window.addEventListener('ionKeyboardDidShow', scrollContent);\n        }\n        /**\n         * This should only fire in 2 instances:\n         * 1. The app is very slow.\n         * 2. The app is running in a browser on an old OS\n         * that does not support Ionic Keyboard Events\n         */\n        scrollContentTimeout = setTimeout(scrollContent, 1000);\n        return;\n      }\n    }\n    scrollContent();\n  }\n};\n\nconst INPUT_BLURRING = true;\nconst startInputShims = async (config, platform) => {\n  const doc = document;\n  const isIOS = platform === 'ios';\n  const isAndroid = platform === 'android';\n  /**\n   * Hide Caret and Input Blurring are needed on iOS.\n   * Scroll Assist and Scroll Padding are needed on iOS and Android\n   * with Chrome web browser (not Chrome webview).\n   */\n  const keyboardHeight = config.getNumber('keyboardHeight', 290);\n  const scrollAssist = config.getBoolean('scrollAssist', true);\n  const hideCaret = config.getBoolean('hideCaretOnScroll', isIOS);\n  const inputBlurring = config.getBoolean('inputBlurring', isIOS);\n  const scrollPadding = config.getBoolean('scrollPadding', true);\n  const inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n  const hideCaretMap = new WeakMap();\n  const scrollAssistMap = new WeakMap();\n  /**\n   * Grab the native keyboard resize configuration\n   * and pass it to scroll assist. Scroll assist requires\n   * that we adjust the input right before the input\n   * is about to be focused. If we called `Keyboard.getResizeMode`\n   * on focusin in scroll assist, we could potentially adjust the\n   * input too late since this call is async.\n   */\n  const keyboardResizeMode = await Keyboard.getResizeMode();\n  const registerInput = async (componentEl) => {\n    await new Promise((resolve) => componentOnReady(componentEl, resolve));\n    const inputRoot = componentEl.shadowRoot || componentEl;\n    const inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\n    const scrollEl = findClosestIonContent(componentEl);\n    const footerEl = !scrollEl ? componentEl.closest('ion-footer') : null;\n    if (!inputEl) {\n      return;\n    }\n    if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n      const rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n      hideCaretMap.set(componentEl, rmFn);\n    }\n    /**\n     * date/datetime-locale inputs on mobile devices show date picker\n     * overlays instead of keyboards. As a result, scroll assist is\n     * not needed. This also works around a bug in iOS <16 where\n     * scroll assist causes the browser to lock up. See FW-1997.\n     */\n    const isDateInput = inputEl.type === 'date' || inputEl.type === 'datetime-local';\n    if (!isDateInput &&\n      (!!scrollEl || !!footerEl) &&\n      scrollAssist &&\n      !scrollAssistMap.has(componentEl)) {\n      const rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, footerEl, keyboardHeight, scrollPadding, keyboardResizeMode, isAndroid);\n      scrollAssistMap.set(componentEl, rmFn);\n    }\n  };\n  const unregisterInput = (componentEl) => {\n    if (hideCaret) {\n      const fn = hideCaretMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      hideCaretMap.delete(componentEl);\n    }\n    if (scrollAssist) {\n      const fn = scrollAssistMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      scrollAssistMap.delete(componentEl);\n    }\n  };\n  if (inputBlurring && INPUT_BLURRING) {\n    enableInputBlurring();\n  }\n  // Input might be already loaded in the DOM before ion-device-hacks did.\n  // At this point we need to look for all of the inputs not registered yet\n  // and register them.\n  for (const input of inputs) {\n    registerInput(input);\n  }\n  // TODO(FW-2832): types\n  doc.addEventListener('ionInputDidLoad', ((ev) => {\n    registerInput(ev.detail);\n  }));\n  doc.addEventListener('ionInputDidUnload', ((ev) => {\n    unregisterInput(ev.detail);\n  }));\n};\n\nexport { startInputShims };\n"],"names":["KeyboardResize","Keyboard","_a","win","engine","cloneMap","relocateInput","componentEl","inputEl","shouldRelocate","inputRelativeY","disabledClonedInput","addClone","removeClone","isFocused","input","parentEl","clonedEl","tx","clone","SCROLL_AMOUNT_PADDING","enableHideCaretOnScroll","scrollEl","scrollHideCaret","shouldHideCaret","onBlur","hideCaret","showCaret","addEventListener","removeEventListener","SKIP_SELECTOR","enableInputBlurring","focused","didScroll","doc","onScroll","onFocusin","onTouchend","ev","active","tapped","SCROLL_ASSIST_SPEED","getScrollData","contentEl","keyboardHeight","itemEl","calcScrollData","inputRect","contentRect","platformHeight","inputTop","inputBottom","visibleAreaTop","visibleAreaBottom","safeAreaTop","distanceToBottom","distanceToTop","desiredScrollAmount","scrollAmount","duration","scrollDuration","PADDING_TIMER_KEY","setScrollPadding","paddingAmount","clearCallback","timer","setClearScrollPaddingListener","doneCallback","clearScrollPadding","currentPadding","enableScrollAssist","footerEl","enableScrollPadding","keyboardResize","disableClonedInput","addScrollPadding","focusIn","jsSetFocus","scrollData","raf","scrollContentTimeout","scrollContent","doubleKeyboardEventListener","scrollByPoint","getScrollElement","totalScrollAmount","INPUT_BLURRING","startInputShims","config","platform","isIOS","isAndroid","scrollAssist","inputBlurring","scrollPadding","inputs","hideCaretMap","scrollAssistMap","keyboardResizeMode","registerInput","resolve","componentOnReady","inputRoot","findClosestIonContent","rmFn","unregisterInput","fn"],"mappings":"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","x_google_ignoreList":[0]}